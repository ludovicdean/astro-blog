---
import { getCollection } from "astro:content";
import BaseHead from "@components/BaseHead.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import RelatedArticles from "@components/RelatedArticles.astro";
import TagsList from "@components/TagsList.astro";
import CallToAction from "@components/CallToAction.astro";
import Summary from '@components/Summary.astro';

const posts = await getCollection('blog');

const {
  title,
  description,
  banner,
  author,
  authorlink,
  unsplashlink,
  isArticle,
  tags
} = Astro.props;

const post = posts.filter((e) => e.data.title === title)[0];

const base = import.meta.env.BASE_URL;
const site = import.meta.env.SITE;
const ogImage = site + base + banner;

interface Heading {
  id: string;
  text: string;
}

const headings : Heading[] = [];

function slugify(text: string): string {
  return text
      .toString()
      .normalize('NFD')           // Décompose les caractères accentués
      .replace(/[\u0300-\u036f]/g, '') // Supprime les diacritiques
      .toLowerCase()
      .trim()
      .replace(/\s+/g, '-')       // Remplace les espaces par des tirets
      .replace(/[^\w-]+/g, '')    // Supprime les caractères non-word
      .replace(/--+/g, '-');      // Remplace les tirets multiples par un seul
}

// Utiliser un parser Markdown pour extraire les titres
const contentWithHeadings = post.body.replace(/^##\s+(.*?)$/gm, (match, title) => {
  const id = slugify(title);
  headings.push({ id, text: title }); // Ajouter à la liste des titres
  return `<h2 id="${id}">${title}</h2>`; // Remplacer par le titre avec ID
});

// Supprimer les marqueurs Markdown des autres niveaux de titres
const finalContent = contentWithHeadings.replace(/^(#{1,6})\s+(.*?)$/gm, (match, hashes, title) => {
  if (hashes === '##') return match; // Ne pas modifier les h2 déjà traités
  return `<h${hashes.length}>${title}</h${hashes.length}>`;
});
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
  </head>

  <body>
    <Header />
    <Summary headings={headings} title={title}/>
    <main class="w-[calc(100%-2em)] max-w-full m-0">
      <article>
        <div class="relative w-full max-w-4xl mx-auto">
          <img src={ base + banner } class="w-full h-auto object-cover">
          <div class="absolute bottom-0 right-0 bg-slate-900 bg-opacity-50 w-full rounded-b-lg">
            <p class="text-white text-sm py-2 px-4 text-right mb-0">© <a href={unsplashlink} class="no-underline text-white hover:text-white">{author}</a> via <a class="no-underline text-white hover:text-white" href={authorlink}>Unsplash</a></p>
          </div>
        </div>
        <div class="w-[900px] max-w-[calc(100%-2em)] mx-auto p-4 text-gray-800">
          <div class="mb-4 py-4 text-center leading-none">
            <h1 class="-mb-0.5">{title}</h1>
            <hr />
          </div>
          {isArticle && <TagsList tags={tags} context="post" />}
          <slot />
          {isArticle && (
              <section>
            <CallToAction />
          </section>)}
          {
            isArticle && (
              <>
                <section>
                  <RelatedArticles tags={tags} title={title} />
                </section>
              </>
            )
          }
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>
